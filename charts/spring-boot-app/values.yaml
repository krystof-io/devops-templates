# Default values for spring-boot-app
replicaCount: 1

image:
  repository: your-registry/your-app
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []

# Naming overrides for Kubernetes resources
# nameOverride: Overrides the chart name portion of resource names
# - Default naming: <release-name>-<chart-name>
# - With nameOverride: <release-name>-<nameOverride>
# - Example: If release is "my-app" and nameOverride is "backend", resources will be named "my-app-backend-*"
nameOverride: ""

# fullnameOverride: Completely overrides the full name of resources
# - Replaces the entire generated name with this value
# - Example: If fullnameOverride is "custom-service", all resources will be named "custom-service"
# - Takes precedence over nameOverride when both are set
# - NOTE: Labels (app.kubernetes.io/instance) will still use the release name for proper Kubernetes identification
# - Resource names and label values serve different purposes and don't need to match
fullnameOverride: ""

serviceAccount:
  create: false
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 3000
  fsGroup: 3000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true

service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
  annotations: {}

ingress:
  enabled: false
  className: "nginx"
  annotations: {}
    # cert-manager.io/cluster-issuer: letsencrypt-prod
    # nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
    - host: app.example.com
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: app-tls
  #    hosts:
  #      - app.example.com

# Traefik IngressRoute configuration
traefikIngressRoute:
  enabled: false
  quickMatch: "" # If set, will override the route match line
  entryPoints:
    - web
    - websecure
  # StripPrefix middleware configuration
  stripPrefix:
    enabled: false
    # Prefixes to strip (e.g., ["/api", "/v1"])
    prefixes: []
    # Custom middleware name (defaults to "<release>-strip-prefix")
    middlewareName: ""
  routes:
    - match: Host(`app.example.com`)
      kind: Rule
      middlewares: []
        # - name: mw-internal-ipwhitelist
        #   namespace: traefik
        # - name: mw-redirect-to-https
        #   namespace: traefik
        # - name: mw-default-https-headers-without-content-security-policy
        #   namespace: traefik
      services:
        - name: "" # Will default to the service name if empty
          port:  # Will default to service.port if not specified

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Spring Boot specific configurations
springBoot:
  profiles:
    active: "prod"
  
  # Management endpoints
  # Note: If management.port equals service.targetPort, only one port will be exposed
  # This prevents duplicate port declarations when apps don't separate management endpoints
  management:
    enabled: true
    port: 8081
      
  # JVM configuration
  jvm:
    # Container-aware JVM defaults (set via JAVA_TOOL_OPTIONS)
    # These provide sensible defaults that work with container resource limits
    containerDefaults:
      enabled: true
      maxRAMPercentage: "75.0"
      useG1GC: true
      useStringDeduplication: true
    
    # Additional JVM options (set via JAVA_TOOL_OPTIONS - works with any Java image)
    # Examples:
    # - Debug: "-Xdebug -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
    # - APM: "-javaagent:newrelic.jar"  
    # - GC tuning: "-XX:G1HeapRegionSize=16m -XX:MaxGCPauseMillis=100"
    additionalOpts: ""
    
    # Java temporary directory override (optional)
    # If not set, uses system default (/tmp)
    # Example: "/app/work" to use application working directory
    tmpdir: ""
    
    # Full JAVA_OPTS override (only use if you need complete control)
    # When set, this completely overrides the image's default JAVA_OPTS
    fullOpts: ""

  # Liveness probe configuration
  livenessProbe:
    enabled: true
    path: /actuator/health/liveness
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    
  # Readiness probe configuration
  readinessProbe:
    enabled: true
    path: /actuator/health/readiness
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  # Startup probe configuration (useful for slow-starting apps)
  startupProbe:
    enabled: false
    path: /actuator/health/liveness
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30    

# OpenTelemetry configuration
opentelemetry:
  enabled: false
  # OpenTelemetry Java agent version (used to locate the agent jar in init utilities image)
  agentVersion: "2.21.0"
  # Service name for traces (defaults to chart fullname if empty)
  serviceName: ""
  # OTLP endpoint (where to send telemetry data)
  endpoint: "http://otel-collector:4318/v1/traces"
  # Init container image for copying the agent from utilities image
  initContainer:
    image: "docker-private.build.krystof.io/krystof-io/init-utilities:latest"
    resources:
      limits:
        cpu: 100m
        memory: 64Mi
      requests:
        cpu: 50m
        memory: 32Mi
  # OpenTelemetry configuration
  config:
    # Resource attributes (key=value,key2=value2)
    resourceAttributes: ""
    # OTLP exporter protocol (grpc, http/protobuf, http/json)
    otlpProtocol: "grpc"
    
    # Trace sampling configuration
    # traceSampler: Controls which traces are collected
    # Valid values:
    #   - "always_on": Sample all traces (100% sampling) - use for development only
    #   - "always_off": Never sample traces (0% sampling) - effectively disables tracing
    #   - "traceidratio": Sample based on trace ID ratio (requires traceSamplerArg)
    #   - "parentbased_always_on": Respect parent sampling decision, otherwise sample all
    #   - "parentbased_always_off": Respect parent sampling decision, otherwise sample none  
    #   - "parentbased_traceidratio": Respect parent sampling decision, otherwise use ratio (default)
    traceSampler: "parentbased_traceidratio"
    
    # traceSamplerArg: Sampling ratio for ratio-based samplers
    # Valid values:
    #   - "0.0" to "1.0": Sampling ratio (0.0 = 0%, 0.1 = 10%, 1.0 = 100%)
    #   - Examples:
    #     - "1.0": Sample all traces (100%) - development/debugging
    #     - "0.1": Sample 10% of traces - typical production setting
    #     - "0.01": Sample 1% of traces - high-traffic production systems
    #     - "0.0": Sample no traces (same as always_off)
    # Note: Only used with ratio-based samplers (traceidratio, parentbased_traceidratio)
    traceSamplerArg: "1.0"
    
    # Metrics exporter configuration
    # Valid values: "otlp", "prometheus", "logging", "none"
    metricsExporter: "otlp"
    
    # Logs exporter configuration  
    # Valid values: "otlp", "logging", "none"
    logsExporter: "none"
    
    # Instrumentation-specific settings
    instrumentationConfig: {}
      # Example:
      # HTTP_ENABLED: "true"
      # JDBC_ENABLED: "true"
      # JMS_ENABLED: "false"  

# Environment variables
env: []
  # - name: JAVA_OPTS
  #   value: "-Xmx512m -Xms256m"
  # - name: SPRING_DATASOURCE_URL
  #   value: "jdbc:postgresql://postgres:5432/mydb"
  # - name: PG_PASSWORD
  #   valueFrom:
  #     secretKeyRef:
  #       name: my-existing-secret  # Name of your existing secret
  #       key: mypass     

# Environment variables from ConfigMap
envFrom: []
  # - configMapRef:
  #     name: app-config
  # - secretRef:
  #     name: app-secrets

# ConfigMap for application.properties or application.yml
configMap:
  enabled: false
  data: {}
    # application.yml: |
    #   server:
    #     port: 8080
    #   spring:
    #     application:
    #       name: my-app
    #     servlet:
    #       multipart:
    #         location: /app/work/uploads
    #   logging:
    #     file:
    #       name: /app/logs/application.log
    #   app:
    #     data:
    #       directory: /app/data
    #     work:
    #       directory: /app/work

# Persistent storage configuration
persistence:
  # Application data storage
  data:
    enabled: false
    storageClass: ""  # Use default storage class if empty
    accessMode: ReadWriteOnce
    size: 1Gi
    mountPath: /app/data
    # Optionally specify existing PVC name
    existingClaim: ""
  
  # Logs storage (usually ephemeral, but can be persistent for debugging)
  logs:
    enabled: false
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 500Mi
    mountPath: /app/logs
    existingClaim: ""
  
  # Application working directory (processing, temp files, etc.)
  work:
    enabled: false
    type: emptyDir  # or "persistentVolume"
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 1Gi
    mountPath: /app/work
    existingClaim: ""

# Additional volumes and volume mounts (for advanced use cases)
volumes: []
  # - name: custom-config
  #   configMap:
  #     name: app-config
  # - name: shared-cache
  #   persistentVolumeClaim:
  #     claimName: shared-cache-pvc

volumeMounts: []
  # - name: custom-config
  #   mountPath: /app/config
  # - name: shared-cache
  #   mountPath: /app/cache

nodeSelector: {}

tolerations: []

affinity: {}

# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1